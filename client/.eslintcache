[{"C:\\Users\\alper\\Desktop\\SpotifyPlaylistCreator\\server\\client\\src\\index.js":"1","C:\\Users\\alper\\Desktop\\SpotifyPlaylistCreator\\server\\client\\src\\logic\\createPlaylist.js":"2","C:\\Users\\alper\\Desktop\\SpotifyPlaylistCreator\\server\\client\\src\\config\\keys.js":"3","C:\\Users\\alper\\Desktop\\SpotifyPlaylistCreator\\server\\client\\src\\config\\dev.js":"4","C:\\Users\\alper\\Desktop\\SpotifyPlaylistCreator\\server\\client\\src\\components\\App.js":"5","C:\\Users\\alper\\Desktop\\SpotifyPlaylistCreator\\server\\client\\src\\components\\Login.js":"6","C:\\Users\\alper\\Desktop\\SpotifyPlaylistCreator\\server\\client\\src\\components\\PlaylistForm.js":"7","C:\\Users\\alper\\Desktop\\SpotifyPlaylistCreator\\server\\client\\src\\config\\prod.js":"8"},{"size":229,"mtime":1611441232863,"results":"9","hashOfConfig":"10"},{"size":7538,"mtime":1611453473605,"results":"11","hashOfConfig":"10"},{"size":142,"mtime":1611436652636,"results":"12","hashOfConfig":"10"},{"size":312,"mtime":1611472219181,"results":"13","hashOfConfig":"10"},{"size":607,"mtime":1611447047350,"results":"14","hashOfConfig":"10"},{"size":287,"mtime":1611446170481,"results":"15","hashOfConfig":"10"},{"size":1321,"mtime":1611472011692,"results":"16","hashOfConfig":"10"},{"size":0,"mtime":1611436621636,"results":"17","hashOfConfig":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"2h9e5l",{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"21"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"21"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"18njtps","C:\\Users\\alper\\Desktop\\SpotifyPlaylistCreator\\server\\client\\src\\index.js",[],["39","40"],"C:\\Users\\alper\\Desktop\\SpotifyPlaylistCreator\\server\\client\\src\\logic\\createPlaylist.js",["41"],"const Sentiment = require('sentiment');\r\nconst sentiment = new Sentiment();\r\nconst keys = require('../config/keys.js');\r\nconst CryptoJS = require('crypto-js');\r\n\r\nconst analyzeSentiment = (phrase) => sentiment.analyze(phrase).score;\r\n\r\nconst getResponse = async (url, token) => {\r\n    const response = await fetch(url, {\r\n        method: 'get',\r\n        headers: {\r\n            'Authorization': 'Bearer ' + CryptoJS.AES.decrypt(token, keys.passphrase).toString(CryptoJS.enc.Utf8),\r\n        }\r\n    })\r\n    const json = await response.json();\r\n    return json;\r\n}\r\n\r\nconst getUserTracks = async (token) => {\r\n    const tracks = await getResponse('https://api.spotify.com/v1/me/tracks?limit=50', token);\r\n    const userTracksIDs = tracks['items'].map(obj => obj.track.id);\r\n    return userTracksIDs;\r\n}\r\n\r\nconst getUserTopArtists = async (token) => {\r\n    const topArtists = await getResponse('https://api.spotify.com/v1/me/top/artists', token);\r\n    const topArtistsIDs = topArtists['items'].map(obj => obj.id);\r\n    return topArtistsIDs\r\n}\r\n\r\nconst getUserTopTracks = async (token) => {\r\n    const topUserTracks = await getResponse('https://api.spotify.com/v1/me/top/tracks?limit=50', token);\r\n    const topUserTracksIDs = topUserTracks['items'].map(obj => obj.id);\r\n    return topUserTracksIDs;\r\n}\r\n\r\n/* \r\nMood considers valence with an interval of [0, 1]. This interval is then translated to a integer value between 0 and 3\r\n*/\r\nconst convertSentimentScoreToMoodScore = async (phrase) => {\r\n    let moodScore = analyzeSentiment(phrase);\r\n    //-20 is treated the same as -5 so set a limit on the interval that way we can convert it easier\r\n    if(moodScore < -5){\r\n        moodScore = -5;\r\n    }\r\n    if(moodScore > 5){\r\n        moodScore = 5;\r\n    }\r\n    //mapping from [-5, 5] to [0, 1] : moodScore - (oldMin) * newMax / oldRange\r\n    moodScore = (moodScore+5) / 10\r\n    return categorizeMoodOfSong(moodScore);\r\n}\r\n\r\nconst categorizeMoodOfSong = (moodScore) => {\r\n    const inBetween = (x, min, max) => {\r\n        return x <= max && x >= min;\r\n    }\r\n\r\n    if(inBetween(moodScore, 0, .35)){\r\n        return 0;\r\n    }\r\n    if(inBetween(moodScore, .36, .6)){\r\n        return 1;\r\n    }\r\n    if(inBetween(moodScore, .61, .8)){\r\n        return 2;\r\n    }\r\n    else{\r\n        return 3;\r\n    }\r\n}\r\n\r\nconst getMoodScoreOfSong = (track) => {\r\n    const score = track[\"valence\"];\r\n    return categorizeMoodOfSong(score);\r\n}\r\n\r\nconst getSongsThatFitMoodFromUserLibrary = async (token, phrase) => {\r\n    const moodScore = await convertSentimentScoreToMoodScore(phrase);\r\n\r\n    const userTracksIDs = await getUserTracks(token);\r\n    const userTopTracksIDs = await getUserTopTracks(token);\r\n    const userAllTracksIDs = userTracksIDs.concat(userTopTracksIDs);\r\n\r\n    const userAllTracksIDsAsString = userAllTracksIDs.toString();\r\n\r\n    const tracksAnalysis = await fetch(`https://api.spotify.com/v1/audio-features?ids=${userAllTracksIDsAsString}`, {\r\n        method: 'get',\r\n        headers: {\r\n            'Authorization': 'Bearer ' + CryptoJS.AES.decrypt(token, keys.passphrase).toString(CryptoJS.enc.Utf8)\r\n        }\r\n    });\r\n\r\n    const analyses = await tracksAnalysis.json();\r\n    const songAnalyses = analyses[\"audio_features\"];\r\n    const songsThatFitMood = songAnalyses.filter(track => getMoodScoreOfSong(track) === moodScore);\r\n    return songsThatFitMood;\r\n}\r\n\r\n//https://stackoverflow.com/questions/19269545/how-to-get-a-number-of-random-elements-from-an-array\r\nconst getRandom = (arr, n) => {\r\n    let result = new Array(n),\r\n        len = arr.length,\r\n        taken = new Array(len);\r\n    if (n > len)\r\n        throw new RangeError(\"getRandom: more elements taken than available\");\r\n    while (n--) {\r\n        const x = Math.floor(Math.random() * len);\r\n        result[n] = arr[x in taken ? taken[x] : x];\r\n        taken[x] = --len in taken ? taken[len] : len;\r\n    }\r\n    return result;\r\n}\r\n\r\n//formatting query so we can get the max of 5 possible seeds to best get recommended tracks\r\nconst formatQuery = async (token, phrase) => {\r\n    const songsFromLibThatFitMood = await getSongsThatFitMoodFromUserLibrary(token, phrase);\r\n    const songsFromLibIDs = songsFromLibThatFitMood.map(song => song.id)\r\n    const length = songsFromLibIDs.length;\r\n    if(length >= 5){\r\n        const truncatedSongsArray = getRandom(songsFromLibIDs, 5);\r\n        return `seed_tracks=${truncatedSongsArray.toString()}`;\r\n    }\r\n    const topArtists = await getUserTopArtists(token);\r\n    const numArtists = 5 - length;\r\n    const artists = getRandom(topArtists, numArtists);\r\n    const query = songsFromLibIDs.concat(artists);\r\n    if(length === 0){\r\n        return `seed_artists=${query.toString()}`;\r\n    }\r\n    else{\r\n        return `seed_tracks=${songsFromLibIDs.toString()}&seed_artists=${artists.toString()}`\r\n    }\r\n}\r\n\r\nconst getUserRecommendations = async (token, phrase) => {\r\n    const query = await formatQuery(token, phrase);\r\n    const recResponse = await fetch(`https://api.spotify.com/v1/recommendations?${query}`, {\r\n        method: 'get',\r\n        headers: {\r\n            'Authorization': 'Bearer ' + CryptoJS.AES.decrypt(token, keys.passphrase).toString(CryptoJS.enc.Utf8),\r\n        }\r\n    })\r\n    const recommendations = await recResponse.json();\r\n    return recommendations;\r\n}\r\n\r\n//https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\r\nconst shuffle = (array) => {\r\n    let currentIndex = array.length, temporaryValue, randomIndex;\r\n  \r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n  \r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n  \r\n      // And swap it with the current element.\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n  \r\n    return array;\r\n  }\r\n\r\nconst getPlaylistTracks = async (token, phrase) => {\r\n    const recommendationsJSON = await getUserRecommendations(token, phrase);\r\n    const recommendations = recommendationsJSON[\"tracks\"].map(recommendation => recommendation.uri);\r\n\r\n    const libSongsJSON = await getSongsThatFitMoodFromUserLibrary(token, phrase);\r\n    const libSongs = libSongsJSON.map(song => song.uri);\r\n\r\n    const playlistSongs = recommendations.concat(libSongs);\r\n    const shuffledPlaylistSongs = shuffle(playlistSongs);\r\n    return shuffledPlaylistSongs;\r\n}\r\n\r\nexport const createPlaylist = async (token, phrase, playlistName, user) => {\r\n    let tracks = await getPlaylistTracks(token, phrase);\r\n    if(tracks.length > 100){\r\n        tracks = getRandom(tracks, 100);\r\n    }\r\n    const addPlaylistToUserAcc = await fetch(`https://api.spotify.com/v1/users/${user}/playlists`, {\r\n        method: 'post',\r\n        headers: {\r\n            'Authorization': 'Bearer ' + CryptoJS.AES.decrypt(token, keys.passphrase).toString(CryptoJS.enc.Utf8),\r\n        },\r\n        body: JSON.stringify({\r\n            \"name\": `${playlistName}`,\r\n        })\r\n    });\r\n    const response = await addPlaylistToUserAcc.json();\r\n    const playlistID = response.id;\r\n\r\n    const addTracks = await fetch(`https://api.spotify.com/v1/playlists/${playlistID}/tracks`, {\r\n        method: 'post',\r\n        headers: {\r\n            'Authorization': 'Bearer ' + CryptoJS.AES.decrypt(token, keys.passphrase).toString(CryptoJS.enc.Utf8),\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            \"uris\": tracks,\r\n        })\r\n    })\r\n}","C:\\Users\\alper\\Desktop\\SpotifyPlaylistCreator\\server\\client\\src\\config\\keys.js",[],"C:\\Users\\alper\\Desktop\\SpotifyPlaylistCreator\\server\\client\\src\\config\\dev.js",[],"C:\\Users\\alper\\Desktop\\SpotifyPlaylistCreator\\server\\client\\src\\components\\App.js",["42","43","44","45"],"import { BrowserRouter, Route, Redirect } from 'react-router-dom';\nimport axios from 'axios';\nimport { createPlaylist } from '../logic/createPlaylist';\nimport Login from './Login';\nimport React, { useState, useEffect } from 'react';\nimport PlaylistForm from './PlaylistForm';\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div>\n        <Route exact path=\"/\">\n          <Redirect to=\"/login\" />\n        </Route>\n        <Route exact path=\"/login\" component={Login} />\n        <Route path=\"/createplaylist\" component={PlaylistForm} />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","C:\\Users\\alper\\Desktop\\SpotifyPlaylistCreator\\server\\client\\src\\components\\Login.js",[],"C:\\Users\\alper\\Desktop\\SpotifyPlaylistCreator\\server\\client\\src\\components\\PlaylistForm.js",["46"],"import React, {useState} from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Col from 'react-bootstrap/Col'\r\nimport Row from 'react-bootstrap/Row';\r\nimport './PlaylistForm.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport axios from 'axios';\r\nimport { createPlaylist } from '../logic/createPlaylist';\r\n\r\nconst PlaylistForm = () => {\r\n    const [playlistName, setPlaylistName] = useState('');\r\n    const [mood, setMood] = useState('');\r\n\r\n    const handleClick = async () => {\r\n        const user = await axios.get('/api/getUser');\r\n        const token = await axios.get('/api/getToken');\r\n\r\n        const id = user.data.id;\r\n        const tokenData = token.data;\r\n\r\n        createPlaylist(tokenData, mood, playlistName, id);\r\n    }\r\n\r\n    const updatePlaylistName = (e) => {\r\n        setPlaylistName(e.target.value);\r\n    }\r\n\r\n    const updateMood = (e) => {\r\n        setMood(e.target.value)\r\n        console.log(mood);\r\n    }\r\n\r\n    return (\r\n        <Form>\r\n            <Row>\r\n                <Form.Control placeholder=\"Playlist Name\" onChange={updatePlaylistName}/>\r\n                <Form.Control placeholder=\"Mood\" onChange={updateMood}/>\r\n                <Button onClick={handleClick}>Yes</Button>\r\n                \r\n            </Row>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default PlaylistForm;","C:\\Users\\alper\\Desktop\\SpotifyPlaylistCreator\\server\\client\\src\\config\\prod.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":197,"column":11,"nodeType":"53","messageId":"54","endLine":197,"endColumn":20},{"ruleId":"51","severity":1,"message":"55","line":2,"column":8,"nodeType":"53","messageId":"54","endLine":2,"endColumn":13},{"ruleId":"51","severity":1,"message":"56","line":3,"column":10,"nodeType":"53","messageId":"54","endLine":3,"endColumn":24},{"ruleId":"51","severity":1,"message":"57","line":5,"column":17,"nodeType":"53","messageId":"54","endLine":5,"endColumn":25},{"ruleId":"51","severity":1,"message":"58","line":5,"column":27,"nodeType":"53","messageId":"54","endLine":5,"endColumn":36},{"ruleId":"51","severity":1,"message":"59","line":3,"column":8,"nodeType":"53","messageId":"54","endLine":3,"endColumn":11},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-unused-vars","'addTracks' is assigned a value but never used.","Identifier","unusedVar","'axios' is defined but never used.","'createPlaylist' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'Col' is defined but never used.","no-global-assign","no-unsafe-negation"]